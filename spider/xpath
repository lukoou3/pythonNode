https://blog.csdn.net/gongbing798930123/article/details/78955597
https://blog.csdn.net/u013332124/article/details/80621638
https://www.jianshu.com/p/1575db75670f
一、基本用法
from lxml import etree
html = etree.HTML(response.text)
links = html.xpath("//ul[@class='mod-play-list play-list-num  tab-panel tab-1']/li/a")

二、基本语法
1、选取节点
Xpath使用路径表达式在XML文档中选取节点。节点是通过沿着路径来选取的，通过路径可以找到我们想要的节点或者节点范围。
表达式	      描述
nodename	  选取此节点的所有子节点。
/	          从根节点选取。
//	        从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
.	          选取当前节点。
..	        选取当前节点的父节点。
@	          选取属性。

事例：
xml.xpath(“bookstore”) 表示选取 bookstore 元素的所有子节点
xml.xpath(“/bookstore”) 表示选取根元素 bookstore。
xml.xpath(“bookstore/book”) 选取属于 bookstore 的子元素的所有 book 元素。
xml.xpath(“//book”) 选取所有 book 子元素，而不管它们在文档中的位置。
xml.xpath(“bookstore//book”) 选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。
xml.xpath(“//@lang”) 选取名为 lang 的所有属性。

2、谓语（Predicates）
谓语用来查找某个特定的节点或者包含某个指定的值的节点。谓语被嵌在方括号中。
路径表达式	                                       结果
/bookstore/book[1]	                            选取属于 bookstore 子元素的第一个 book 元素。
/bookstore/book[last()]		                      选取属于 bookstore 子元素的最后一个 book 元素。
/bookstore/book[last()-1]		                    选取属于 bookstore 子元素的倒数第二个 book 元素。
/bookstore/book[position()<3]		                选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
//title[@lang]		                              选取所有拥有名为 lang 的属性的 title 元素。
//title[@lang=’eng’]		                        选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
/bookstore/book[price>35.00]		                选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
/bookstore/book[price>35.00]/title		          选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。

3、通配符
XPath 通配符可用来选取未知的 XML 元素,通配指定节点。
通配符	    描述
*	        匹配任何元素节点。
@*	      匹配任何属性节点。
node()	  匹配任何类型的节点。

例子：
路径表达式	      结果
/bookstore/*	  选取 bookstore 元素的所有子元素。
//*	            选取文档中的所有元素。
//title[@*]	    选取所有带有属性的 title 元素。

4、多路径选择
通过在路径表达式中使用“|”运算符，您可以选取若干个路径。
//book/title | //book/price         选取 book 元素的所有 title 和 price 元素。
//title | //price                   选取文档中的所有 title 和 price 元素。
/bookstore/book/title | //price     选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。

5、轴
轴可定义相对于当前节点的节点集。
轴名称	结果
ancestor	选取当前节点的所有先辈（父、祖父等）。
ancestor-or-self	选取当前节点的所有先辈（父、祖父等）以及当前节点本身。
attribute	选取当前节点的所有属性。
child	选取当前节点的所有子元素。
descendant	选取当前节点的所有后代元素（子、孙等）。
descendant-or-self	选取当前节点的所有后代元素（子、孙等）以及当前节点本身。
following	选取文档中当前节点的结束标签之后的所有节点。
namespace	选取当前节点的所有命名空间节点。
parent	选取当前节点的父节点。
preceding	选取文档中当前节点的开始标签之前的所有节点。
preceding-sibling	选取当前节点之前的所有同级节点。
self	选取当前节点。

轴的语法： 
轴名称::节点测试[谓语]

例子：
例子	结果
child::book	选取所有属于当前节点的子元素的 book 节点。
attribute::lang	选取当前节点的 lang 属性。
child::*	选取当前节点的所有子元素。
attribute::*	选取当前节点的所有属性。
child::text()	选取当前节点的所有文本子节点。
child::node()	选取当前节点的所有子节点。
descendant::book	选取当前节点的所有 book 后代。
ancestor::book	选择当前节点的所有 book 先辈。
ancestor-or-self::book	选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）
child::*/child::price	选取当前节点的所有 price 孙节点。

6、XPath 运算符
运算符	描述	实例	返回值
|	计算两个节点集	//book | //cd	返回所有拥有 book 和 cd 元素的节点集
+	加法	6 + 4	10
-	减法	6 - 4	2
*	乘法	6 * 4	24
div	除法	8 div 4	2
=	等于	price=9.80	
!=	不等于	price!=9.80	
<	小于	price<9.80	
<=	小于或等于	price<=9.80	
>	大于	price>9.80	
>=	大于或等于	price>=9.80	
or	或	price=9.80 or price=9.70	
and	与	price>9.00 and price<9.90	
mod	计算除法的余数	5 mod 2	

7、常用的功能函数
1. starts-with函数
xpath(‘//div[stars-with(@class,”test”)]’)

2 contains函数
xpath(‘//div[contains(@id,”test”)]’)

3 and
xpath(‘//div[contains(@id,”test”) and contains(@id,”title”)]’)

4 text()函数
xpath(‘//div[contains(text(),”test”)]’) 
xpath(‘//div[@id=”“test]/text()’)

三
